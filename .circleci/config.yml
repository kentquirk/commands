version: 2.1
aws_defaults: &aws_defaults
  AWS_ACCOUNT: "578681496768"
  ECR_REGION: "us-east-1"
  ECS_REGION: "us-west-1"

commands:
  notify:
    description: "Notifies the team with a message"
    parameters:
      msg:
        type: string
    steps:
      - run:
          name: send message
          command: |
              # this is necessary to get the environment variables to interpolate properly
              echo "{\"text\":\"<< parameters.msg >>\"}" >parms.txt
              curl -X POST -H 'Content-type: application/json' --data @parms.txt https://hooks.slack.com/services/$SLACK_KEY

  notify_error:
    description: "Notifies the team with a message only when an error occurs"
    parameters:
      msg:
        type: string
    steps:
      - run:
          name: send error message
          command: |
              echo "{\"text\":\"<< parameters.msg >>\"}" >parms.txt
              curl -X POST -H 'Content-type: application/json' --data @parms.txt https://hooks.slack.com/services/$SLACK_KEY
          when: on_fail

  mark_honeycomb:
    description: "Places a marker in the specified honeycomb dataset"
    parameters:
      msg:
        type: string
      dataset:
        type: string
    steps:
      - run:
          name: create marker
          command: |
            echo "{\"message\":\"<< parameters.msg >>\", \"type\":\"deploy\"}" >parms.txt
            cat parms.txt   #just to be sure
            curl -X POST -H "X-Honeycomb-Team: $HONEYCOMB_KEY" -d @parms.txt https://api.honeycomb.io/1/markers/<< parameters.dataset >>

  save_image:
    description: "Saves a docker image to the cache"
    parameters:
      img_name:
        type: string
      key:
        type: string
    steps:
      # bring back a cache if one already exists
      - restore_cache:
          key: << parameters.key >>
      - run:
          name: save docker image to cache
          command: |
            # ensure cache directory
            [ -d /opt/docker-cache ] || mkdir -p /opt/docker-cache
            #
            docker save -o "/opt/docker-cache/<< parameters.img_name >>.tar" "<< parameters.img_name >>"
      # saves this path with this cache key
      - save_cache:
          key: << parameters.key >>
          paths:
            - /opt/docker-cache

  setup:
    description: "These steps should be run before any real ci/cd actions"
    steps:
      # add an ssh key granted with this circleci's settings for this repo
      - add_ssh_keys:
          fingerprints:
            - "7d:f1:8e:9e:99:9a:26:e2:4d:0c:66:f3:d4:74:10:e7"
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: AWS ECR Login
          command: eval $(aws ecr get-login --no-include-email --region ${ECR_REGION})

      - run:
          name: Checkout code
          command: |
            if [ -z "$CIRCLE_BRANCH" ] # if CIRCLE_BRANCH is not set, check out CIRCLE_TAG
            then
              echo "CIRCLE_TAG = $CIRCLE_TAG"
              git clone $CIRCLE_REPOSITORY_URL -b $CIRCLE_TAG /commands
            else # use CIRCLE_BRANCH
              echo "CIRCLE_BRANCH = $CIRCLE_BRANCH"
              git clone $CIRCLE_REPOSITORY_URL -b $CIRCLE_BRANCH /commands
            fi

            # add the circle image's known_hosts file to the known_hosts used inside the images
            cp /root/.ssh/known_hosts /commands/deploy/known_hosts

            # install github machine user key
            # This needs to be here. Otherwise git will cowardly refuse to clone into an non-empty directory.
            echo -e "$machine_user_key" > /commands/machine_user_key

      - run:
          name: get git information
          command: |
            cd /commands
            echo 'export VERSION=$(git describe --long --tags --match="v*")' >> $BASH_ENV
            echo 'export SHA=$(git rev-parse --short $CIRCLE_SHA1)' >> $BASH_ENV
            echo 'export CI_USER=$CIRCLE_USERNAME' >> $BASH_ENV
            echo 'export CI_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV

  setup_ecs_and_identities:
    description: |
      Downloads ecs, configures it and downloads node identities.
      This should be run before any deploy steps.
    steps:
      - run:
          name: download and configure ecs-cli
          command: |
            # download ecs cli
            curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest && \
            chmod +x /usr/local/bin/ecs-cli

            # configure ecs
            ecs-cli configure profile --access-key "$AWS_ACCESS_KEY_ID" --secret-key "$AWS_SECRET_ACCESS_KEY" --profile-name default
            ecs-cli configure --cluster "$CLUSTER_NAME" --region "$ECS_REGION" --config-name "$CLUSTER_NAME"
      - run:
          name: Download node identities
          command: |
            S3_NODE_ID_ARCHIVE="node-identities-${NETWORK_NAME}.tgz"
            AWS_ACCESS_KEY_ID=$AWS_DEPLOY_SECRETS_ID \
            AWS_SECRET_ACCESS_KEY=$AWS_DEPLOY_SECRETS_KEY \
              aws s3 cp "s3://ndau-deploy-secrets/$S3_NODE_ID_ARCHIVE" "./$S3_NODE_ID_ARCHIVE"
            mkdir -p /root/node-identities
            tar xzvf "./$S3_NODE_ID_ARCHIVE" -C /root/node-identities

  deploy-net:
    description: Deploy using ECS
    steps:
      - setup
      - setup_ecs_and_identities
      - mark_honeycomb:
          dataset: $HONEYCOMB_DATASET
          msg: Start deploy for build $CIRCLE_BUILD_NUM
      - ecs_deploy
      - notify:
          msg: Deploy complete; nodes for $NETWORK_NAME are now starting up.

  ecs_deploy:
    description: Deploy using ECS
    steps:
      - run:
          name: deploy
          command: |

            # get bash environment variables from previous steps
            source $BASH_ENV

            for i in $( seq 0 9 ); do # automatically deploy up to 10 nodes
              echo "Attempting node: $i"
              if [ -f  "/root/node-identities/node-identity-$i.tgz" ]; then
                echo "Found node identity at: /root/node-identities/node-identity-$i.tgz"
                /commands/deploy/deploy-node.sh $i $NETWORK_NAME /root/node-identities &
              fi # no else break in case some nodes are updated and others are not
            done

            wait


workflows:
  version: 2
  master-build:
    jobs:
      - build-deps-stub:
          filters:
            branches:
              only: /^master$/
      - test-stub:
          requires:
            - build-deps
      - build-stub:
          requires:
            - build-deps
      - build-image-stub:
          requires:
            - test
            - build
      - catchup-stub:
          requires:
            - build-image
      - push-stub:
          requires:
            - build-image
      - deploy-devnet-stub:
          requires:
            - push
      - integration-stub:
          requires:
            - catchup
            - deploy-devnet
  tagged-build:
    jobs:
      - build-deps-stub:
          # These filters cause circle to run this job on tagged (or untagged) non-master builds.
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /^master$/
      - test-stub:
          requires:
            - build-deps
      - build-stub:
          requires:
            - build-deps
      - build-image-stub:
          requires:
            - test
            - build
          filters:
            tags:
              only: /.*-catchup$|.*-push$|.*-deploy$/
            branches:
              # This causes circle to skip this job on untagged non-master builds.
              ignore: /.*/
      - catchup-stub:
          requires:
            - build-image
          filters:
            tags:
              only: /.*-catchup$|.*-deploy$/
      - push-stub:
          requires:
            - build-image
          filters:
            tags:
              only: /.*-push$|.*-deploy$/
      - deploy-devnet-stub:
          requires:
            - push
          filters:
            tags:
              only: /.*-deploy$/
      - integration-stub:
          requires:
            - catchup
            - deploy-devnet
          filters:
            tags:
              only: /.*-deploy$/

general_config: &general_config
    working_directory: /commands
    docker:
        - image: 578681496768.dkr.ecr.us-east-1.amazonaws.com/circle-ci:0.0.9
    environment:
        shell: /bin/bash
        <<: *aws_defaults
        NDAUHOME: /root/.ndau
        NETWORK_NAME: devnet
        PERSISTENT_PEERS: 88cf98107823c1ca6621a0656daeecf731870532@devnet.ndau.tech:26660,7c7a66648ca0bf152aeee0c2d358f2d9f7b18341@devnet.ndau.tech:26661,dfa5eca4f826e977379e44d19dd606c06d8f7b7c@devnet.ndau.tech:26662,595562bf12ae2ba03d522f7026d9aa653ab9707c@devnet.ndau.tech:26663,59ed8217b8ef647b7ed1439408f3de35873e65d0@devnet.ndau.tech:26664 # devnet
        CLUSTER_NAME: devnet

jobs:
  build-deps-stub:
    <<: *general_config
    steps:
      - run:
          name: build-deps stub
          command: |
            echo "build-deps stub"

  test-stub:
    <<: *general_config
    steps:
      - run:
          name: test stub
          command: |
            echo "test stub"

  build-stub:
    <<: *general_config
    steps:
      - run:
          name: build stub
          command: |
            echo "build stub"

  build-image-stub:
    <<: *general_config
    steps:
      - run:
          name: build-image stub
          command: |
            echo "build-image stub"

  catchup-stub:
    <<: *general_config
    steps:
      - run:
          name: catchup stub
          command: |
            echo "catchup stub"

  push-stub:
    <<: *general_config
    steps:
      - run:
          name: push stub
          command: |
            echo "push stub"

  deploy-devnet-stub:
    <<: *general_config
    steps:
      - run:
          name: deploy-devnet stub
          command: |
            echo "deploy-devnet stub"

  integration-stub:
    <<: *general_config
    steps:
      - run:
          name: integration stub
          command: |
            echo "integration stub"

  build-deps:
    <<: *general_config
    steps:
      - setup
      - run:
          name: build-deps
          command: |
            # build deps image
            docker build -t deps -f /commands/deploy/deps.docker /commands/
      - save_image:
          img_name: deps:latest
          key: "{{ .Revision }}-deps"

  test:
    <<: *general_config
    steps:
      - setup
      - restore_cache:
          key: "{{ .Revision }}-deps"
      - run:
          name: Test
          command: |
            # load previously cached containers
            find /opt/docker-cache -name "*.tar" -exec docker load -i {} \;

            # this runs a test script within the deps image
            docker run --rm \
                -e CI=true \
                deps \
                /bin/sh /root/test.sh

  build:
    <<: *general_config
    steps:
      - setup
      - restore_cache:
          key: "{{ .Revision }}-deps"
      - run:
          name: Build
          command: |
            # load previously cached containers
            find /opt/docker-cache -name "*.tar" -exec docker load -i {} \;

            # this runs a build script within the deps image
            docker run \
                -e CI=true \
                deps \
                /bin/sh /root/build.sh

  build-image:
    <<: *general_config
    steps:
      - setup
      - run:
          name: build the single container image
          command: |
            # TODO let buildimage.sh use the already fetched vendor dir

            # reload saved environment variables
            source $BASH_ENV
            # build single container node image
            if [ -z "$CIRCLE_BRANCH" ]
            then
              echo "CIRCLE_TAG = $CIRCLE_TAG"
              ./docker/bin/buildimage.sh "$CIRCLE_TAG"
            else
              echo "CIRCLE_BRANCH = $CIRCLE_BRANCH"
              ./docker/bin/buildimage.sh "$CIRCLE_BRANCH"
            fi

  catchup:
    <<: *general_config
    steps:
      - run:
          name: test catchup on mainnet from genesis
          command: |
            USE_LOCAL_IMAGE=1 \
            ./docker/bin/runcontainer.sh \
            mainnet catchup-test 26660 26670 3030 "" snapshot-mainnet-1

            echo "TODO: wait for catchup"

            ./docker/bin/stopcontainer.sh catchup-test

  push:
    <<: *general_config
    steps:
      - setup
      - run:
          name: push the single container image
          command: |
            # reload saved environment variables
            source $BASH_ENV
            # upload the image to S3 for public access
            docker tag ndauimage ndauimage:$SHA
            docker save ndauimage:$SHA -o /root/ndauimage-$SHA.docker
            gzip -f /root/ndauimage-$SHA.docker
            aws s3 cp /root/ndauimage-$SHA.docker.gz s3://ndau-images/ndauimage-$SHA.docker.gz
            # update the current-*.txt file for the network we're deploying to
            # but only if we're deploying to master (e.g. don't do this for tagged pushes)
            if [ "$CIRCLE_BRANCH" = "master" ]; then
                echo $SHA > /root/current-$NETWORK_NAME.txt
                aws s3 cp /root/current-$NETWORK_NAME.txt s3://ndau-images/current-$NETWORK_NAME.txt
            fi
            # retag built image
            docker tag ndauimage $AWS_ACCOUNT.dkr.ecr.$ECR_REGION.amazonaws.com/sc-node:$SHA
            docker rmi ndauimage:$SHA
            # push the image to ECR
            docker push $AWS_ACCOUNT.dkr.ecr.$ECR_REGION.amazonaws.com/sc-node:$SHA

  deploy-devnet:
    <<: *general_config
    steps:
      - deploy-net

  integration:
    <<: *general_config
    steps:
      - setup
      - restore_cache:
          key: "{{ .Revision }}-deps"
      - run:
          name: Integration tests
          command: |
            # load previously cached containers
            find /opt/docker-cache -name "*.tar" -exec docker load -i {} \;

            # ensure go path location
            export GOPATH=/go
            mkdir -p $GOPATH/bin
            ndev_dir=$GOPATH/src/github.com/oneiro-ndev
            mkdir -p $ndev_dir
            cd $ndev_dir

            # install dep
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

            # install sed
            apk add sed

            # clone integration tests and ndev dep repos
            git clone git@github.com:oneiro-ndev/integration-tests.git
            ( cd integration-tests && echo "integration-tests repo at $(git rev-parse --short HEAD)" )

            # build the ndau tool
            docker run deps /bin/sh -c 'go build -o /root/ndau /go/src/github.com/oneiro-ndev/commands/cmd/ndau'
            container_id=$(docker ps -alq 2>&1)
            docker commit "$container_id" temp:latest
            docker run -d temp:latest /bin/sh -c 'sleep 60'
            container_id=$(docker ps -alq 2>&1)
            mkdir -p $ndev_dir/commands
            docker cp $container_id:/root/ndau $ndev_dir/commands/

            # get ndautool.toml from the genesis repo; we use the testnet copy for devnet
            git clone git@github.com:oneiro-ndev/genesis.git
            mkdir -p $NDAUHOME/ndau
            cp genesis/testnet-genesis/genesis_files/ndautool.toml $NDAUHOME/ndau/ndautool.toml

            cd integration-tests

            # sync pipenv
            pipenv sync

            # run tests
            NODE_ADDRESS=https://devnet.ndau.tech \
            NODE_0_RPC=26670 \
            NODE_1_RPC=26671 \
              pipenv run pytest -v --net=devnet --ndauapi=https://devnet.ndau.tech:3030
