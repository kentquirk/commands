{
    package main

}

Script <- Line* EOF

Line <-
	( CommentOnlyLine
	/ ConstDefLine
	/ OpcodeLine
	/ StartBlockLine
	/ EndBlockLine
	)

CommentOnlyLine <- _ cm:Comment EOL { return newLine("", "", cm), nil }

ConstDefLine <- _ k:Constant _ '=' _ v:Arg _ cm:Comment EOL   { return newLine("",  []interface{}{k, " = ", v}, cm), nil }

OpcodeLine <- _ o:Opcode EOL	{ return o, nil }
Opcode <- k:Keyword _ a:Args? _ cm:Comment   { return newLine(k, a, cm), nil }

StartBlockLine <-
	( _ k:( "handler" / "def" ) _ a:Args _ cm:Comment EOL		{ return newLine(k, a, cm), nil }
	/ _ k:( "handler" / "def" ) _ a:Args _ b:'{' _ cm:Comment EOL     { return newLine(k, []interface{}{a, " ", b}, cm), nil }
	)

EndBlockLine <- _ k:( "enddef" / '}' ) _ cm:Comment EOL             { return newLine(k, "", cm), nil }

Args <-
	( a:Arg            							{ return a, nil }
	/ a:Arg __ as:Args            				{ return string(c.text), nil }
	)

Arg <-
	( [^;=\t\r\n ][^;\t\r\n ]*            						{ return string(c.text), nil }
	/ '"' [^"]* '"'            					{ return string(c.text), nil }
	)

Constant 	 <- [A-Za-z] [A-Za-z0-9_]*            { return string(c.text), nil }
FunctionName <- [A-Za-z] [A-Za-z0-9_]+            { return string(c.text), nil }
Keyword 	 <- [A-Za-z] [A-Za-z0-9_]*            { return string(c.text), nil }


Comment <-
	( ';' [^\r\n]* 								{ return string(c.text), nil }
	/ _											{ return "", nil }
	)

EOL <- _ ("\r\n" / "\n\r" / "\r" / "\n" )

_ <- [ \t]*			// optional space
__ <- [ \t]+		// required space

EOF <- !.

