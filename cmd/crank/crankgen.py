#! /usr/bin/env python3

"""
Reads .crankgen files and creates iterations of them based on iterating
through values and plugging those values into a template; relieve tedium in
testing combinations of chasm code.
It supports two kinds of substitutions:
If you do something like:

```
VAR a = A, B, C
VAR n = 1, 2, 3
BEGIN_TEMPLATE
Here we go: $a$n = {-{n*100}-}
```

You'll get 9 files for all combinations of a and n, and $a will get the current
value of a, and $n will get the current value of n. After that, text between {-{ and }-}
will be evaluated as a python expression, converted to a string, and substituted
for the original. So file 8 will look like this:
`Here we go: C2 = 200`

It is also legal to evaluate expressions within the header. This allows you to
do things like:

```
VAR a = 2, 4, 6
VAR n = 1, 2, 3
LAMBDA sum = a+n
BEGIN_TEMPLATE
assert $a + $n == $sum
assert $sum - $a == $n
assert $sum - $n == $a
```

This will compute $sum for each combination of $a and $n, and inject the value
appropriately in the output file. The advantage is that you don't need to copy
and paste the same expression multiple times.

LAMBDAS are evaluated sequentially, so it is safe to refer to a previous lambda
within a subsequent one. However, recursion is not supported.

Because LAMBDA and VAR aggressively attempt to analyze the type of their arguments,
it is sometimes necessary to tell VAR to simply treat them as strings. In this instance,
you can use SVAR instead of VAR.
"""

import os
import re
import sys
import itertools
from collections import OrderedDict
from string import Template

EVAL_PAT = re.compile(r"{-{(.*?)}-}", re.DOTALL)


def evalText(m):
    expr = m.group(1)
    try:
        result = eval(expr)
        return str(result)
    except Exception:
        # print(expr)
        return expr


def parse_as(val, *types):
    """
    For each type in types, attempt to parse the value as that type.

    Return the first parse which does not raise ValueError.
    If no type succeeds, return the string value.
    """
    for typ in types:
        try:
            return typ(val)
        except ValueError:
            pass
    return val


def generate(fname):
    vars = {}
    lams = OrderedDict()
    templ = []
    recording = False
    for l in open(fname):
        stripped = l.strip()
        if l.startswith("SVAR") or l.startswith("VAR") or l.startswith("LAMBDA"):
            lhs, rhs = [s.strip() for s in l.split("=")]
            # split off the keyword
            _, name = lhs.split(maxsplit=1)
            if lhs.startswith("VAR"):
                vars[name] = [
                    (name, parse_as(s.strip(), int, float)) for s in rhs.split(",")
                ]
            elif lhs.startswith("SVAR"):
                vars[name] = [(name, s.strip()) for s in rhs.split(",")]
            else:
                lams[name] = rhs
        elif stripped == "BEGIN_TEMPLATE":
            recording = True
        elif recording is True:
            templ.append(l)

    values = vars.values()
    combos = [dict(x) for x in itertools.product(*values)]
    for idx, combo in enumerate(combos):
        for name, lam in lams.items():
            combo[name] = eval(lam, combo)
        combos[idx] = combo

    template = Template("".join(templ))

    name, ext = os.path.splitext(fname)
    ext = ".crank"
    for index in range(len(combos)):
        outf = open(f"{name}_{index+1}_gen{ext}", "w")
        print(
            f"; GENERATED BY generate.py FROM {os.path.basename(fname)} - DO NOT EDIT",
            file=outf,
        )
        try:
            txt = template.substitute(combos[index])
        except Exception as e:
            print(repr(e), file=sys.stderr)
            print("locals:", combos[index], file=sys.stderr)
            print(f"Error processing template {fname}, index {index}", file=sys.stderr)
            sys.exit(1)
        else:
            txt = EVAL_PAT.sub(evalText, txt)
            outf.write(txt)
            outf.close()


if __name__ == "__main__":
    for x in sys.argv[1:]:
        generate(x)
