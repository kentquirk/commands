#! /usr/bin/env python3

# Reads .crankgen files and creates iterations of them based on iterating
# through values and plugging those values into a template; relieve tedium in
# testing combinations of chasm code.

# It supports two kinds of substitutions:
# If you do something like:
#
# ----
# VAR a = A, B, C
# VAR n = 1, 2, 3

# BEGIN_TEMPLATE
# Here we go: $a$n = [[n*100]]
# ----
#
# You'll get 9 files for all combinations of a and n, and $a will get the current
# value of a, and $n will get the current value of n. After that, text in [[]]
# will be evaluated as a python expression, converted to a string, and substituted
# for the original. So file 8 will look like this:
# `Here we go: C2 = 200`

import os
import re
import sys
import itertools
from string import Template


def evalText(m):
    expr = m.group(1)
    try:
        result = eval(expr)
        return str(result)
    except Exception:
        # print(expr)
        return expr


def generate(fname):
    vars = {}
    templ = []
    recording = False
    for l in open(fname):
        stripped = l.strip()
        if l.startswith("VAR"):
            lhs, rhs = [s.strip() for s in l[4:].split("=")]
            vars[lhs] = [(lhs, s.strip()) for s in rhs.split(",")]
        elif stripped == "BEGIN_TEMPLATE":
            recording = True
        elif recording is True:
            templ.append(l)

    values = [vars[k] for k in vars]
    combos = [dict(x) for x in itertools.product(*values)]
    template = Template("".join(templ))

    name, ext = os.path.splitext(fname)
    ext = ".crank"
    for index in range(len(combos)):
        outf = open(f"{name}_{index+1}_gen{ext}", "w")
        outf.write(
            f"; GENERATED BY generate.py FROM {os.path.basename(fname)} - DO NOT EDIT\n"
        )
        try:
            txt = template.substitute(combos[index])
        except Exception as e:
            sys.stderr.write(e)
            sys.stderr.write(f"Error processing template {fname}, index {index}\n")
            sys.exit(1)
        else:
            p = re.compile(r"\[\[([^]]+)\]\]")
            txt = p.sub(evalText, txt)
            outf.write(txt)
            outf.close()


if __name__ == "__main__":
    for x in sys.argv[1:]:
        generate(x)
