#! /usr/bin/env python
# Reads .crankgen files and creates iterations of them based on iterating through values
# and plugging those values into a template; relieve tedium in testing combinations of chasm code.

import os
import sys
import itertools
from string import Template

def generate(fname):
    vars = {}
    templ = []
    recording = False
    for l in open(fname):
        stripped = l.strip()
        if l.startswith("VAR"):
            lhs, rhs = [s.strip() for s in l[4:].split("=")]
            vars[lhs] = [(lhs, s.strip()) for s in rhs.split(",")]
        elif stripped == "BEGIN_TEMPLATE":
            recording = True
        elif recording == True:
            templ.append(l)

    values = [vars[k] for k in vars]
    combos = [dict(x) for x in itertools.product(*values)]
    template = Template(''.join(templ))

    name, ext = os.path.splitext(fname)
    ext = ".crank"
    for index in range(len(combos)):
        outf = open("{}_{}_gen{}".format(name, index+1, ext), "w")
        outf.write("; GENERATED BY generate.py FROM {} -- DO NOT EDIT\n".format(os.path.basename(fname)))
        try:
            txt = template.substitute(combos[index])
        except:
            sys.stderr.write("Error processing template {}, index {}\n".format(fname, index))
            sys.exit(1)
        else:
            outf.write(txt)
            outf.close()


if __name__ == "__main__":
    for x in sys.argv[1:]:
        generate(x)

