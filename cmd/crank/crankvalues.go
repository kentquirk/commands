// Code generated by pigeon; DO NOT EDIT.

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/oneiro-ndev/chaincode/pkg/chain"
	"github.com/oneiro-ndev/chaincode/pkg/vm"
	"github.com/oneiro-ndev/ndaumath/pkg/constants"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Result",
			pos:  position{line: 13, col: 1, offset: 204},
			expr: &choiceExpr{
				pos: position{line: 14, col: 7, offset: 220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 7, offset: 220},
						run: (*parser).callonResult2,
						expr: &seqExpr{
							pos: position{line: 14, col: 7, offset: 220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 7, offset: 220},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 9, offset: 222},
										name: "Values",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 16, offset: 229},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 15, col: 7, offset: 297},
						run: (*parser).callonResult7,
						expr: &ruleRefExpr{
							pos:  position{line: 15, col: 7, offset: 297},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Values",
			pos:  position{line: 18, col: 1, offset: 373},
			expr: &choiceExpr{
				pos: position{line: 19, col: 7, offset: 389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 19, col: 7, offset: 389},
						run: (*parser).callonValues2,
						expr: &seqExpr{
							pos: position{line: 19, col: 7, offset: 389},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 19, col: 7, offset: 389},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 9, offset: 391},
										name: "Value",
									},
								},
								&litMatcher{
									pos:        position{line: 19, col: 15, offset: 397},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 19, col: 19, offset: 401},
									label: "vs",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 22, offset: 404},
										name: "Values",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 23, col: 7, offset: 527},
						run: (*parser).callonValues9,
						expr: &seqExpr{
							pos: position{line: 23, col: 7, offset: 527},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 23, col: 7, offset: 527},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 9, offset: 529},
										name: "Value",
									},
								},
								&labeledExpr{
									pos:   position{line: 23, col: 15, offset: 535},
									label: "vs",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 18, offset: 538},
										name: "Values",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 27, col: 7, offset: 661},
						run: (*parser).callonValues15,
						expr: &labeledExpr{
							pos:   position{line: 27, col: 7, offset: 661},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 9, offset: 663},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 30, col: 1, offset: 749},
			expr: &choiceExpr{
				pos: position{line: 31, col: 7, offset: 764},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 31, col: 7, offset: 764},
						name: "Timestamp",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 7, offset: 780},
						name: "Account",
					},
					&ruleRefExpr{
						pos:  position{line: 33, col: 7, offset: 794},
						name: "Number",
					},
					&ruleRefExpr{
						pos:  position{line: 34, col: 7, offset: 807},
						name: "BinaryConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 35, col: 7, offset: 828},
						name: "Napu",
					},
					&ruleRefExpr{
						pos:  position{line: 36, col: 7, offset: 839},
						name: "Ndau",
					},
					&ruleRefExpr{
						pos:  position{line: 37, col: 7, offset: 850},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 38, col: 7, offset: 869},
						name: "HexBytes",
					},
					&ruleRefExpr{
						pos:  position{line: 39, col: 7, offset: 884},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 40, col: 7, offset: 895},
						name: "Struct",
					},
				},
			},
		},
		{
			name: "Timestamp",
			pos:  position{line: 43, col: 1, offset: 909},
			expr: &actionExpr{
				pos: position{line: 43, col: 14, offset: 922},
				run: (*parser).callonTimestamp1,
				expr: &seqExpr{
					pos: position{line: 43, col: 14, offset: 922},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 43, col: 14, offset: 922},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 16, offset: 924},
							label: "ts",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 19, offset: 927},
								name: "RFC3339",
							},
						},
					},
				},
			},
		},
		{
			name: "RFC3339",
			pos:  position{line: 45, col: 1, offset: 998},
			expr: &actionExpr{
				pos: position{line: 45, col: 12, offset: 1009},
				run: (*parser).callonRFC33391,
				expr: &seqExpr{
					pos: position{line: 45, col: 12, offset: 1009},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 45, col: 12, offset: 1009},
							expr: &charClassMatcher{
								pos:        position{line: 45, col: 12, offset: 1009},
								val:        "[0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 45, col: 20, offset: 1017},
							val:        "T",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 45, col: 24, offset: 1021},
							expr: &charClassMatcher{
								pos:        position{line: 45, col: 24, offset: 1021},
								val:        "[0-9:]",
								chars:      []rune{':'},
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 45, col: 32, offset: 1029},
							expr: &seqExpr{
								pos: position{line: 45, col: 33, offset: 1030},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 45, col: 33, offset: 1030},
										val:        ".",
										ignoreCase: false,
									},
									&oneOrMoreExpr{
										pos: position{line: 45, col: 37, offset: 1034},
										expr: &charClassMatcher{
											pos:        position{line: 45, col: 37, offset: 1034},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 45, col: 46, offset: 1043},
							val:        "Z",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Account",
			pos:  position{line: 47, col: 1, offset: 1080},
			expr: &actionExpr{
				pos: position{line: 47, col: 12, offset: 1091},
				run: (*parser).callonAccount1,
				expr: &seqExpr{
					pos: position{line: 47, col: 12, offset: 1091},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 47, col: 12, offset: 1091},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 47, col: 14, offset: 1093},
							val:        "account",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 49, col: 1, offset: 1172},
			expr: &choiceExpr{
				pos: position{line: 50, col: 7, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 7, offset: 1188},
						name: "BinaryNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 7, offset: 1207},
						name: "HexNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 7, offset: 1223},
						name: "DecimalNumber",
					},
				},
			},
		},
		{
			name: "BinaryNumber",
			pos:  position{line: 55, col: 1, offset: 1244},
			expr: &actionExpr{
				pos: position{line: 55, col: 17, offset: 1260},
				run: (*parser).callonBinaryNumber1,
				expr: &seqExpr{
					pos: position{line: 55, col: 17, offset: 1260},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 55, col: 17, offset: 1260},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 55, col: 19, offset: 1262},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 21, offset: 1264},
								name: "BinaryValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BinaryValue",
			pos:  position{line: 60, col: 1, offset: 1364},
			expr: &actionExpr{
				pos: position{line: 60, col: 16, offset: 1379},
				run: (*parser).callonBinaryValue1,
				expr: &seqExpr{
					pos: position{line: 60, col: 16, offset: 1379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 60, col: 16, offset: 1379},
							val:        "0b",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 60, col: 21, offset: 1384},
							expr: &charClassMatcher{
								pos:        position{line: 60, col: 21, offset: 1384},
								val:        "[01_]",
								chars:      []rune{'0', '1', '_'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "HexNumber",
			pos:  position{line: 62, col: 1, offset: 1442},
			expr: &actionExpr{
				pos: position{line: 62, col: 14, offset: 1455},
				run: (*parser).callonHexNumber1,
				expr: &seqExpr{
					pos: position{line: 62, col: 14, offset: 1455},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 62, col: 14, offset: 1455},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 16, offset: 1457},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 18, offset: 1459},
								name: "HexValue",
							},
						},
					},
				},
			},
		},
		{
			name: "HexValue",
			pos:  position{line: 67, col: 1, offset: 1556},
			expr: &actionExpr{
				pos: position{line: 67, col: 13, offset: 1568},
				run: (*parser).callonHexValue1,
				expr: &seqExpr{
					pos: position{line: 67, col: 13, offset: 1568},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 67, col: 13, offset: 1568},
							val:        "0x",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 67, col: 18, offset: 1573},
							expr: &charClassMatcher{
								pos:        position{line: 67, col: 18, offset: 1573},
								val:        "[0-9a-fA-F_]",
								chars:      []rune{'_'},
								ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DecimalNumber",
			pos:  position{line: 69, col: 1, offset: 1634},
			expr: &actionExpr{
				pos: position{line: 69, col: 18, offset: 1651},
				run: (*parser).callonDecimalNumber1,
				expr: &seqExpr{
					pos: position{line: 69, col: 18, offset: 1651},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 18, offset: 1651},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 20, offset: 1653},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 22, offset: 1655},
								name: "DecimalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "DecimalValue",
			pos:  position{line: 74, col: 1, offset: 1756},
			expr: &choiceExpr{
				pos: position{line: 75, col: 7, offset: 1778},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 7, offset: 1778},
						run: (*parser).callonDecimalValue2,
						expr: &seqExpr{
							pos: position{line: 75, col: 7, offset: 1778},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 75, col: 7, offset: 1778},
									expr: &litMatcher{
										pos:        position{line: 75, col: 7, offset: 1778},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 75, col: 12, offset: 1783},
									expr: &charClassMatcher{
										pos:        position{line: 75, col: 12, offset: 1783},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 7, offset: 1855},
						run: (*parser).callonDecimalValue8,
						expr: &litMatcher{
							pos:        position{line: 76, col: 7, offset: 1855},
							val:        "0",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BinaryConstant",
			pos:  position{line: 79, col: 1, offset: 1933},
			expr: &actionExpr{
				pos: position{line: 79, col: 19, offset: 1951},
				run: (*parser).callonBinaryConstant1,
				expr: &seqExpr{
					pos: position{line: 79, col: 19, offset: 1951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 79, col: 19, offset: 1951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 21, offset: 1953},
							label: "k",
							expr: &choiceExpr{
								pos: position{line: 79, col: 24, offset: 1956},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 79, col: 24, offset: 1956},
										name: "True",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 29, offset: 1961},
										name: "False",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "True",
			pos:  position{line: 80, col: 1, offset: 1997},
			expr: &actionExpr{
				pos: position{line: 80, col: 9, offset: 2005},
				run: (*parser).callonTrue1,
				expr: &seqExpr{
					pos: position{line: 80, col: 9, offset: 2005},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 80, col: 9, offset: 2005},
							val:        "[Tt]",
							chars:      []rune{'T', 't'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 80, col: 13, offset: 2009},
							val:        "[Rr]",
							chars:      []rune{'R', 'r'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 80, col: 17, offset: 2013},
							val:        "[Uu]",
							chars:      []rune{'U', 'u'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 80, col: 21, offset: 2017},
							val:        "[Ee]",
							chars:      []rune{'E', 'e'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "False",
			pos:  position{line: 81, col: 1, offset: 2075},
			expr: &actionExpr{
				pos: position{line: 81, col: 10, offset: 2084},
				run: (*parser).callonFalse1,
				expr: &seqExpr{
					pos: position{line: 81, col: 10, offset: 2084},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 81, col: 10, offset: 2084},
							val:        "[Ff]",
							chars:      []rune{'F', 'f'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 81, col: 14, offset: 2088},
							val:        "[Aa]",
							chars:      []rune{'A', 'a'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 81, col: 18, offset: 2092},
							val:        "[Ll]",
							chars:      []rune{'L', 'l'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 81, col: 22, offset: 2096},
							val:        "[Ss]",
							chars:      []rune{'S', 's'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 81, col: 26, offset: 2100},
							val:        "[Ee]",
							chars:      []rune{'E', 'e'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Napu",
			pos:  position{line: 83, col: 1, offset: 2154},
			expr: &actionExpr{
				pos: position{line: 83, col: 9, offset: 2162},
				run: (*parser).callonNapu1,
				expr: &seqExpr{
					pos: position{line: 83, col: 9, offset: 2162},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 9, offset: 2162},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 83, col: 11, offset: 2164},
							val:        "np",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 83, col: 16, offset: 2169},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 18, offset: 2171},
								name: "DecimalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "Ndau",
			pos:  position{line: 89, col: 1, offset: 2381},
			expr: &actionExpr{
				pos: position{line: 89, col: 9, offset: 2389},
				run: (*parser).callonNdau1,
				expr: &seqExpr{
					pos: position{line: 89, col: 9, offset: 2389},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 9, offset: 2389},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 89, col: 11, offset: 2391},
							val:        "nd",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 89, col: 16, offset: 2396},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 18, offset: 2398},
								name: "FloatValue",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatValue",
			pos:  position{line: 95, col: 1, offset: 2648},
			expr: &choiceExpr{
				pos: position{line: 96, col: 7, offset: 2668},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 7, offset: 2668},
						run: (*parser).callonFloatValue2,
						expr: &seqExpr{
							pos: position{line: 96, col: 7, offset: 2668},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 96, col: 7, offset: 2668},
									expr: &charClassMatcher{
										pos:        position{line: 96, col: 7, offset: 2668},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 15, offset: 2676},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 96, col: 19, offset: 2680},
									expr: &charClassMatcher{
										pos:        position{line: 96, col: 19, offset: 2680},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 7, offset: 2745},
						run: (*parser).callonFloatValue9,
						expr: &seqExpr{
							pos: position{line: 97, col: 7, offset: 2745},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 97, col: 7, offset: 2745},
									expr: &charClassMatcher{
										pos:        position{line: 97, col: 7, offset: 2745},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 97, col: 15, offset: 2753},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 97, col: 19, offset: 2757},
									expr: &charClassMatcher{
										pos:        position{line: 97, col: 19, offset: 2757},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 7, offset: 2822},
						run: (*parser).callonFloatValue16,
						expr: &seqExpr{
							pos: position{line: 98, col: 7, offset: 2822},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 98, col: 7, offset: 2822},
									expr: &charClassMatcher{
										pos:        position{line: 98, col: 7, offset: 2822},
										val:        "[0-9_]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 98, col: 15, offset: 2830},
									expr: &litMatcher{
										pos:        position{line: 98, col: 15, offset: 2830},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 101, col: 1, offset: 2900},
			expr: &choiceExpr{
				pos: position{line: 102, col: 7, offset: 2922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 102, col: 7, offset: 2922},
						name: "DoubleQuote",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 7, offset: 2940},
						name: "SingleQuote",
					},
				},
			},
		},
		{
			name: "DoubleQuote",
			pos:  position{line: 106, col: 1, offset: 2959},
			expr: &actionExpr{
				pos: position{line: 106, col: 16, offset: 2974},
				run: (*parser).callonDoubleQuote1,
				expr: &seqExpr{
					pos: position{line: 106, col: 16, offset: 2974},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 16, offset: 2974},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 106, col: 18, offset: 2976},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 106, col: 22, offset: 2980},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 24, offset: 2982},
								name: "Escaped2QuotedText",
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 43, offset: 3001},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuote",
			pos:  position{line: 107, col: 1, offset: 3045},
			expr: &actionExpr{
				pos: position{line: 107, col: 16, offset: 3060},
				run: (*parser).callonSingleQuote1,
				expr: &seqExpr{
					pos: position{line: 107, col: 16, offset: 3060},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 107, col: 16, offset: 3060},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 107, col: 18, offset: 3062},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 107, col: 22, offset: 3066},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 24, offset: 3068},
								name: "Escaped1QuotedText",
							},
						},
						&litMatcher{
							pos:        position{line: 107, col: 43, offset: 3087},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Escaped2QuotedText",
			pos:  position{line: 109, col: 1, offset: 3132},
			expr: &actionExpr{
				pos: position{line: 109, col: 23, offset: 3154},
				run: (*parser).callonEscaped2QuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 109, col: 23, offset: 3154},
					label: "t",
					expr: &zeroOrMoreExpr{
						pos: position{line: 109, col: 25, offset: 3156},
						expr: &ruleRefExpr{
							pos:  position{line: 109, col: 25, offset: 3156},
							name: "Escaped2QuotedRun",
						},
					},
				},
			},
		},
		{
			name: "Escaped2QuotedRun",
			pos:  position{line: 117, col: 1, offset: 3373},
			expr: &choiceExpr{
				pos: position{line: 118, col: 7, offset: 3400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 118, col: 7, offset: 3400},
						run: (*parser).callonEscaped2QuotedRun2,
						expr: &oneOrMoreExpr{
							pos: position{line: 118, col: 7, offset: 3400},
							expr: &charClassMatcher{
								pos:        position{line: 118, col: 7, offset: 3400},
								val:        "[^\"\\\\]",
								chars:      []rune{'"', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 7, offset: 3469},
						run: (*parser).callonEscaped2QuotedRun5,
						expr: &litMatcher{
							pos:        position{line: 119, col: 7, offset: 3469},
							val:        "\\n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 7, offset: 3544},
						run: (*parser).callonEscaped2QuotedRun7,
						expr: &litMatcher{
							pos:        position{line: 120, col: 7, offset: 3544},
							val:        "\\r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 7, offset: 3619},
						run: (*parser).callonEscaped2QuotedRun9,
						expr: &litMatcher{
							pos:        position{line: 121, col: 7, offset: 3619},
							val:        "\\t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 7, offset: 3694},
						run: (*parser).callonEscaped2QuotedRun11,
						expr: &litMatcher{
							pos:        position{line: 122, col: 7, offset: 3694},
							val:        "\\\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 123, col: 7, offset: 3769},
						run: (*parser).callonEscaped2QuotedRun13,
						expr: &litMatcher{
							pos:        position{line: 123, col: 7, offset: 3769},
							val:        "\\\\",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Escaped1QuotedText",
			pos:  position{line: 126, col: 1, offset: 3845},
			expr: &actionExpr{
				pos: position{line: 126, col: 23, offset: 3867},
				run: (*parser).callonEscaped1QuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 126, col: 23, offset: 3867},
					label: "t",
					expr: &zeroOrMoreExpr{
						pos: position{line: 126, col: 25, offset: 3869},
						expr: &ruleRefExpr{
							pos:  position{line: 126, col: 25, offset: 3869},
							name: "Escaped1QuotedRun",
						},
					},
				},
			},
		},
		{
			name: "Escaped1QuotedRun",
			pos:  position{line: 134, col: 1, offset: 4086},
			expr: &choiceExpr{
				pos: position{line: 135, col: 7, offset: 4113},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 7, offset: 4113},
						run: (*parser).callonEscaped1QuotedRun2,
						expr: &oneOrMoreExpr{
							pos: position{line: 135, col: 7, offset: 4113},
							expr: &charClassMatcher{
								pos:        position{line: 135, col: 7, offset: 4113},
								val:        "[^'\\\\]",
								chars:      []rune{'\'', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 7, offset: 4182},
						run: (*parser).callonEscaped1QuotedRun5,
						expr: &litMatcher{
							pos:        position{line: 136, col: 7, offset: 4182},
							val:        "\\n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 7, offset: 4257},
						run: (*parser).callonEscaped1QuotedRun7,
						expr: &litMatcher{
							pos:        position{line: 137, col: 7, offset: 4257},
							val:        "\\r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 7, offset: 4332},
						run: (*parser).callonEscaped1QuotedRun9,
						expr: &litMatcher{
							pos:        position{line: 138, col: 7, offset: 4332},
							val:        "\\t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 7, offset: 4407},
						run: (*parser).callonEscaped1QuotedRun11,
						expr: &litMatcher{
							pos:        position{line: 139, col: 7, offset: 4407},
							val:        "\\'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 140, col: 7, offset: 4481},
						run: (*parser).callonEscaped1QuotedRun13,
						expr: &litMatcher{
							pos:        position{line: 140, col: 7, offset: 4481},
							val:        "\\\\",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "HexBytes",
			pos:  position{line: 143, col: 1, offset: 4557},
			expr: &actionExpr{
				pos: position{line: 143, col: 13, offset: 4569},
				run: (*parser).callonHexBytes1,
				expr: &seqExpr{
					pos: position{line: 143, col: 13, offset: 4569},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 143, col: 13, offset: 4569},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 143, col: 15, offset: 4571},
							val:        "B(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 143, col: 20, offset: 4576},
							label: "bs",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 23, offset: 4579},
								name: "HexPairs",
							},
						},
						&litMatcher{
							pos:        position{line: 143, col: 32, offset: 4588},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "HexPairs",
			pos:  position{line: 153, col: 1, offset: 5030},
			expr: &actionExpr{
				pos: position{line: 153, col: 13, offset: 5042},
				run: (*parser).callonHexPairs1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 13, offset: 5042},
					expr: &seqExpr{
						pos: position{line: 153, col: 14, offset: 5043},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 153, col: 14, offset: 5043},
								val:        "[0-9A-Fa-f]",
								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
								ignoreCase: false,
								inverted:   false,
							},
							&charClassMatcher{
								pos:        position{line: 153, col: 25, offset: 5054},
								val:        "[0-9A-Fa-f]",
								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 153, col: 36, offset: 5065},
								expr: &charClassMatcher{
									pos:        position{line: 153, col: 36, offset: 5065},
									val:        "[_ ]",
									chars:      []rune{'_', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Struct",
			pos:  position{line: 155, col: 1, offset: 5108},
			expr: &choiceExpr{
				pos: position{line: 156, col: 7, offset: 5124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 7, offset: 5124},
						run: (*parser).callonStruct2,
						expr: &seqExpr{
							pos: position{line: 156, col: 7, offset: 5124},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 156, col: 7, offset: 5124},
									name: "StructStart",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 19, offset: 5136},
									name: "StructEnd",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 7, offset: 5201},
						run: (*parser).callonStruct6,
						expr: &seqExpr{
							pos: position{line: 157, col: 7, offset: 5201},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 157, col: 7, offset: 5201},
									name: "StructStart",
								},
								&labeledExpr{
									pos:   position{line: 157, col: 19, offset: 5213},
									label: "fl",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 22, offset: 5216},
										name: "Fields",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 29, offset: 5223},
									name: "StructEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 170, col: 1, offset: 5569},
			expr: &choiceExpr{
				pos: position{line: 171, col: 7, offset: 5585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 171, col: 7, offset: 5585},
						run: (*parser).callonFields2,
						expr: &seqExpr{
							pos: position{line: 171, col: 7, offset: 5585},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 171, col: 7, offset: 5585},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 9, offset: 5587},
										name: "Field",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 171, col: 15, offset: 5593},
									expr: &litMatcher{
										pos:        position{line: 171, col: 15, offset: 5593},
										val:        ",",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 20, offset: 5598},
									label: "fs",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 23, offset: 5601},
										name: "Fields",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 7, offset: 5724},
						run: (*parser).callonFields10,
						expr: &labeledExpr{
							pos:   position{line: 175, col: 7, offset: 5724},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 9, offset: 5726},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 178, col: 1, offset: 5812},
			expr: &actionExpr{
				pos: position{line: 178, col: 10, offset: 5821},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 178, col: 10, offset: 5821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 178, col: 10, offset: 5821},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 178, col: 12, offset: 5823},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 15, offset: 5826},
								name: "FieldID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 178, col: 23, offset: 5834},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 178, col: 25, offset: 5836},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 178, col: 29, offset: 5840},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 31, offset: 5842},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldID",
			pos:  position{line: 190, col: 1, offset: 6252},
			expr: &actionExpr{
				pos: position{line: 190, col: 12, offset: 6263},
				run: (*parser).callonFieldID1,
				expr: &choiceExpr{
					pos: position{line: 190, col: 14, offset: 6265},
					alternatives: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 190, col: 14, offset: 6265},
							expr: &charClassMatcher{
								pos:        position{line: 190, col: 14, offset: 6265},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 190, col: 23, offset: 6274},
							expr: &charClassMatcher{
								pos:        position{line: 190, col: 23, offset: 6274},
								val:        "[A-Z_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 192, col: 1, offset: 6330},
			expr: &choiceExpr{
				pos: position{line: 193, col: 7, offset: 6344},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 7, offset: 6344},
						run: (*parser).callonList2,
						expr: &seqExpr{
							pos: position{line: 193, col: 7, offset: 6344},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 193, col: 7, offset: 6344},
									name: "ListStart",
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 17, offset: 6354},
									name: "ListEnd",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 7, offset: 6419},
						run: (*parser).callonList6,
						expr: &seqExpr{
							pos: position{line: 194, col: 7, offset: 6419},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 194, col: 7, offset: 6419},
									name: "ListStart",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 17, offset: 6429},
									label: "vs",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 20, offset: 6432},
										name: "Values",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 27, offset: 6439},
									name: "ListEnd",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StructStart",
			pos:  position{line: 197, col: 1, offset: 6513},
			expr: &seqExpr{
				pos: position{line: 197, col: 16, offset: 6528},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 197, col: 16, offset: 6528},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 197, col: 18, offset: 6530},
						val:        "{",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "StructEnd",
			pos:  position{line: 198, col: 1, offset: 6534},
			expr: &seqExpr{
				pos: position{line: 198, col: 14, offset: 6547},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 198, col: 14, offset: 6547},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 198, col: 16, offset: 6549},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ListStart",
			pos:  position{line: 199, col: 1, offset: 6553},
			expr: &seqExpr{
				pos: position{line: 199, col: 14, offset: 6566},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 14, offset: 6566},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 199, col: 16, offset: 6568},
						val:        "[",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ListEnd",
			pos:  position{line: 200, col: 1, offset: 6572},
			expr: &seqExpr{
				pos: position{line: 200, col: 12, offset: 6583},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 200, col: 12, offset: 6583},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 200, col: 14, offset: 6585},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 202, col: 1, offset: 6590},
			expr: &zeroOrMoreExpr{
				pos: position{line: 202, col: 6, offset: 6595},
				expr: &charClassMatcher{
					pos:        position{line: 202, col: 6, offset: 6595},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 204, col: 1, offset: 6603},
			expr: &seqExpr{
				pos: position{line: 204, col: 8, offset: 6610},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 204, col: 8, offset: 6610},
						name: "_",
					},
					&notExpr{
						pos: position{line: 204, col: 10, offset: 6612},
						expr: &anyMatcher{
							line: 204, col: 11, offset: 6613,
						},
					},
				},
			},
		},
	},
}

func (c *current) onResult2(v interface{}) (interface{}, error) {
	return v.([]vm.Value), nil
}

func (p *parser) callonResult2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResult2(stack["v"])
}

func (c *current) onResult7() (interface{}, error) {
	return []vm.Value{}, nil
}

func (p *parser) callonResult7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResult7()
}

func (c *current) onValues2(v, vs interface{}) (interface{}, error) {
	va := append([]vm.Value{v.(vm.Value)}, vs.([]vm.Value)...)
	return va, nil

}

func (p *parser) callonValues2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValues2(stack["v"], stack["vs"])
}

func (c *current) onValues9(v, vs interface{}) (interface{}, error) {
	va := append([]vm.Value{v.(vm.Value)}, vs.([]vm.Value)...)
	return va, nil

}

func (p *parser) callonValues9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValues9(stack["v"], stack["vs"])
}

func (c *current) onValues15(v interface{}) (interface{}, error) {
	return []vm.Value{v.(vm.Value)}, nil
}

func (p *parser) callonValues15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValues15(stack["v"])
}

func (c *current) onTimestamp1(ts interface{}) (interface{}, error) {
	return vm.ParseTimestamp(ts.(string))
}

func (p *parser) callonTimestamp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimestamp1(stack["ts"])
}

func (c *current) onRFC33391() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRFC33391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRFC33391()
}

func (c *current) onAccount1() (interface{}, error) {
	return chain.ToValue(getRandomAccount())
}

func (p *parser) callonAccount1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAccount1()
}

func (c *current) onBinaryNumber1(n interface{}) (interface{}, error) {
	x, err := parseInt(n.(string), 64)
	return vm.NewNumber(x), err

}

func (p *parser) callonBinaryNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryNumber1(stack["n"])
}

func (c *current) onBinaryValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBinaryValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryValue1()
}

func (c *current) onHexNumber1(n interface{}) (interface{}, error) {
	x, err := parseInt(n.(string), 64)
	return vm.NewNumber(x), err

}

func (p *parser) callonHexNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexNumber1(stack["n"])
}

func (c *current) onHexValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHexValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexValue1()
}

func (c *current) onDecimalNumber1(n interface{}) (interface{}, error) {
	x, err := parseInt(n.(string), 64)
	return vm.NewNumber(x), err

}

func (p *parser) callonDecimalNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimalNumber1(stack["n"])
}

func (c *current) onDecimalValue2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDecimalValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimalValue2()
}

func (c *current) onDecimalValue8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDecimalValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimalValue8()
}

func (c *current) onBinaryConstant1(k interface{}) (interface{}, error) {
	return k, nil
}

func (p *parser) callonBinaryConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBinaryConstant1(stack["k"])
}

func (c *current) onTrue1() (interface{}, error) {
	return vm.NewNumber(1), nil
}

func (p *parser) callonTrue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrue1()
}

func (c *current) onFalse1() (interface{}, error) {
	return vm.NewNumber(0), nil
}

func (p *parser) callonFalse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFalse1()
}

func (c *current) onNapu1(n interface{}) (interface{}, error) {
	// napu is a base-10 positive integer preceded with np; it is delivered as an integer number of napu
	x, err := parseInt(n.(string), 64)
	return vm.NewNumber(x), err

}

func (p *parser) callonNapu1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNapu1(stack["n"])
}

func (c *current) onNdau1(n interface{}) (interface{}, error) {
	// ndau values are a base-10 positive decimal, which is multiplied by 10^8 and converted to integer
	x, err := strconv.ParseFloat(n.(string), 64)
	return vm.NewNumber(int64(x * constants.QuantaPerUnit)), err

}

func (p *parser) callonNdau1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNdau1(stack["n"])
}

func (c *current) onFloatValue2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatValue2()
}

func (c *current) onFloatValue9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatValue9()
}

func (c *current) onFloatValue16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatValue16()
}

func (c *current) onDoubleQuote1(b interface{}) (interface{}, error) {
	return vm.NewBytes(b.([]byte)), nil
}

func (p *parser) callonDoubleQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuote1(stack["b"])
}

func (c *current) onSingleQuote1(b interface{}) (interface{}, error) {
	return vm.NewBytes(b.([]byte)), nil
}

func (p *parser) callonSingleQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuote1(stack["b"])
}

func (c *current) onEscaped2QuotedText1(t interface{}) (interface{}, error) {
	ba := make([][]byte, len(t.([]interface{})))
	for _, b := range t.([]interface{}) {
		ba = append(ba, b.([]byte))
	}
	return bytes.Join(ba, nil), nil

}

func (p *parser) callonEscaped2QuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedText1(stack["t"])
}

func (c *current) onEscaped2QuotedRun2() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonEscaped2QuotedRun2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun2()
}

func (c *current) onEscaped2QuotedRun5() (interface{}, error) {
	return []byte("\n"), nil
}

func (p *parser) callonEscaped2QuotedRun5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun5()
}

func (c *current) onEscaped2QuotedRun7() (interface{}, error) {
	return []byte("\r"), nil
}

func (p *parser) callonEscaped2QuotedRun7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun7()
}

func (c *current) onEscaped2QuotedRun9() (interface{}, error) {
	return []byte("\t"), nil
}

func (p *parser) callonEscaped2QuotedRun9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun9()
}

func (c *current) onEscaped2QuotedRun11() (interface{}, error) {
	return []byte("\""), nil
}

func (p *parser) callonEscaped2QuotedRun11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun11()
}

func (c *current) onEscaped2QuotedRun13() (interface{}, error) {
	return []byte("\\"), nil
}

func (p *parser) callonEscaped2QuotedRun13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped2QuotedRun13()
}

func (c *current) onEscaped1QuotedText1(t interface{}) (interface{}, error) {
	ba := make([][]byte, len(t.([]interface{})))
	for _, b := range t.([]interface{}) {
		ba = append(ba, b.([]byte))
	}
	return bytes.Join(ba, nil), nil

}

func (p *parser) callonEscaped1QuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedText1(stack["t"])
}

func (c *current) onEscaped1QuotedRun2() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonEscaped1QuotedRun2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun2()
}

func (c *current) onEscaped1QuotedRun5() (interface{}, error) {
	return []byte("\n"), nil
}

func (p *parser) callonEscaped1QuotedRun5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun5()
}

func (c *current) onEscaped1QuotedRun7() (interface{}, error) {
	return []byte("\r"), nil
}

func (p *parser) callonEscaped1QuotedRun7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun7()
}

func (c *current) onEscaped1QuotedRun9() (interface{}, error) {
	return []byte("\t"), nil
}

func (p *parser) callonEscaped1QuotedRun9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun9()
}

func (c *current) onEscaped1QuotedRun11() (interface{}, error) {
	return []byte("'"), nil
}

func (p *parser) callonEscaped1QuotedRun11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun11()
}

func (c *current) onEscaped1QuotedRun13() (interface{}, error) {
	return []byte("\\"), nil
}

func (p *parser) callonEscaped1QuotedRun13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscaped1QuotedRun13()
}

func (c *current) onHexBytes1(bs interface{}) (interface{}, error) {
	// arrays of bytes are B(hex) with individual bytes as hex pairs with no 0x; embedded spaces and underscores are ignored
	ba := []byte{}
	pair := regexp.MustCompile("([0-9A-Fa-f][0-9A-Fa-f])")
	for _, it := range pair.FindAllString(bs.(string), -1) {
		b, _ := strconv.ParseInt(strings.TrimSpace(it), 16, 8)
		ba = append(ba, byte(b))
	}
	return vm.NewBytes(ba), nil

}

func (p *parser) callonHexBytes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexBytes1(stack["bs"])
}

func (c *current) onHexPairs1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHexPairs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexPairs1()
}

func (c *current) onStruct2() (interface{}, error) {
	return vm.NewStruct(), nil
}

func (p *parser) callonStruct2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct2()
}

func (c *current) onStruct6(fl interface{}) (interface{}, error) {
	str := vm.NewStruct()
	for _, i := range fl.([]vm.Value) {
		istr := i.(*vm.Struct)
		for _, ix := range istr.Indices() {
			v2, _ := istr.Get(ix)
			str = str.Set(ix, v2)
		}
	}
	return str, nil

}

func (p *parser) callonStruct6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct6(stack["fl"])
}

func (c *current) onFields2(f, fs interface{}) (interface{}, error) {
	fa := append([]vm.Value{f.(vm.Value)}, fs.([]vm.Value)...)
	return fa, nil

}

func (p *parser) callonFields2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields2(stack["f"], stack["fs"])
}

func (c *current) onFields10(f interface{}) (interface{}, error) {
	return []vm.Value{f.(vm.Value)}, nil
}

func (p *parser) callonFields10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields10(stack["f"])
}

func (c *current) onField1(id, v interface{}) (interface{}, error) {
	// fields for structs are fieldid:Value; they are returned as a struct with one field that
	// is consolidated when they are enclosed in {} wrappers
	s := id.(string)
	if p, ok := predefined[s]; ok {
		s = p
	}
	fieldid, err := strconv.ParseInt(s, 10, 8)
	str := vm.NewStruct().Set(byte(fieldid), v.(vm.Value))
	return str, err

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["id"], stack["v"])
}

func (c *current) onFieldID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFieldID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldID1()
}

func (c *current) onList2() (interface{}, error) {
	return vm.NewList(), nil
}

func (p *parser) callonList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList2()
}

func (c *current) onList6(vs interface{}) (interface{}, error) {
	return vm.NewList(vs.([]vm.Value)...), nil
}

func (p *parser) callonList6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList6(stack["vs"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
