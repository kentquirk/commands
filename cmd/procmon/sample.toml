[env]
FORMAT = "text"
LOGLEVEL = "info"
DEFAULT_RESTART_DELAY = "1s"

TASK_A = "A"
TASK_B = "B"
TASK_C = "C"
TASK_D = "D"
TASK_E = "E"

PORT_A = "12341"
PORT_B = "12342"
PORT_C = "12343"
PORT_D = "12344"
PORT_E = "12345"

[logger]
output = "STDERR"
format = "$FORMAT"
level = "$LOGLEVEL"

[[task]]
    # this task is run on SIGHUP and shuts everything down before it runs
    # this is good for periodic backups
    name = "HUPTASK"
    path = "/bin/sh"
    args = [
        "-c",
        "echo hup hup hooray"
    ]
    stdout = "HUP.log"
    [task.specials]
        onetime = true
        shutdown = true
        signal = "SIGHUP"
        terminate = false

[[task]]
    # this task is run on SIGUSR1 and can be used to trigger any kind of
    # on-demand process; perhaps something for debugging
    name = "USRTASK1"
    path = "/bin/sh"
    args = [
        "-c",
        "echo user sez hi"
    ]
    stdout = "USR1.log"
    [task.specials]
        onetime = true
        shutdown = false
        signal = "SIGUSR1"
        terminate = false

[[task]]
    # this task is run periodically (for demos, every 17 seconds)
    # it does not shut down the system, but if you want to make sure
    # you have a restart every so often, this might be a way to do that
    # if you set the "shutdown" flag.
    name = "TIMER17"
    path = "/bin/sh"
    args = [
        "-c",
        "date"
    ]
    stdout = "TIMER17.log"
    [task.specials]
        onetime = true
        periodic = "17s"
        shutdown = false
        terminate = false

[[task]]
    # This is a way to run special processing when you hit ctrl-C
    # terminate = true
    name = "INT"
    path = "/bin/sh"
    args = [
        "-c",
        "echo buh-bye"
    ]
    stdout = "INT.log"
    [task.specials]
        onetime = true
        shutdown = false
        signal = "SIGINT"
        terminate = true

[[task]]
    # This is a way to convert particular exit codes into signals for the master task
    name = "MAYBE_INT"
    path = "/bin/maybe_int"
    [task.specials]
        onetime = true
        signal = "SIGUSR2"
        # If maybe_int returns 0 (or anything else not in the table),
        # no signal is processed.
        # If it returns 1, the master task reacts per a SIGHUP.
        # If it returns 2, the master task reacts per a SIGTERM.
        exit_signals = {1 = "SIGHUP", 2 = "SIGTERM"}

[[task]]
    # Alternate syntax for exit signals
    name = "MAYBE_INT_2"
    path = "/bin/maybe_int"
    [task.specials]
        onetime = true
        signal = "SIGUSR2"

    [task.specials.exit_signals]
        "0xFE" = "SIGHUP"
        0xff = "SIGINT"
        0777 = "SIGTERM"

[[task]]
    name = "$TASK_A"
    path = "$GOPATH/src/github.com/oneiro-ndev/rest/cmd/demo/demo"
    args = [
        "--port=$PORT_A"
    ]
    # special values are:
    # "SUPPRESS" (also "") meaning "discard this stream"
    # "HONEYCOMB" sends the message to honeycomb
    # Anything else is a named file
    stdout = ""
    stderr = "$TASK_A.log"
    # durations are done as time.Duration
    maxshutdown = "2s"

    [[task.monitors]]
        name = "health"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_A/health"
        period = "2s"
        timeout = "1s"

    [[task.monitors]]
        name = "ready"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_A/health"
        timeout = "100ms"

[[task]]
    name = "$TASK_B"
    path = "/Users/kentquirk/go/src/github.com/oneiro-ndev/rest/cmd/demo/demo"
    args = [
        "--port=$PORT_B"
    ]
    parent = "$TASK_A"
    stdout = ""
    stderr = "$TASK_B.log"
    # durations are done as time.Duration
    maxshutdown = "2s"

    [[task.monitors]]
        name = "health"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_B/health"
        period = "2s"
        timeout = "1s"

    [[task.monitors]]
        name = "ready"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_B/health"
        timeout = "100ms"

[[task]]
    name = "$TASK_C"
    path = "/Users/kentquirk/go/src/github.com/oneiro-ndev/rest/cmd/demo/demo"
    args = [
        "--port=$PORT_C"
    ]
    parent = "$TASK_B"
    stdout = ""
    stderr = "$TASK_C.log"
    # durations are done as time.Duration
    maxshutdown = "2s"

    [[task.monitors]]
        name = "health"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_C/health"
        period = "2s"
        timeout = "1s"

    [[task.monitors]]
        name = "ready"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_C/health"
        timeout = "100ms"

[[task]]
    name = "$TASK_D"
    path = "/Users/kentquirk/go/src/github.com/oneiro-ndev/rest/cmd/demo/demo"
    args = [
        "--port=$PORT_D"
    ]
    parent = "$TASK_C"
    stdout = ""
    stderr = "$TASK_D.log"
    # durations are done as time.Duration
    maxshutdown = "2s"

    [[task.monitors]]
        name = "health"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_D/health"
        period = "2s"
        timeout = "1s"

    [[task.monitors]]
        name = "ready"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_D/health"
        timeout = "100ms"

[[task]]
    name = "$TASK_E"
    path = "/Users/kentquirk/go/src/github.com/oneiro-ndev/rest/cmd/demo/demo"
    args = [
        "--port=$PORT_E"
    ]
    parent = "$TASK_D"
    stdout = ""
    stderr = "$TASK_E.log"
    # durations are done as time.Duration
    maxshutdown = "2s"

    [[task.monitors]]
        name = "health"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_E/health"
        period = "2s"
        timeout = "1s"

    [[task.monitors]]
        name = "ready"
        type = "http"
        verb = "GET"
        url = "http://localhost:$PORT_E/health"
        timeout = "100ms"

